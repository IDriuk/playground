
284. Peeking Iterator
Given an Iterator class interface with methods: next() and hasNext(),
design and implement a PeekingIterator that support the peek() operation --
it essentially peek() at the element that will be returned by the next call to next()

public class PeekingIterator implements Iterator<Integer> {

  private Integer next;
  private Iterator<Integer> iter;

  /**
   * Peeking iterator is based on normal iterator.
   * Just a wrapper class.
   * Use a variable to cache the next element.
   */
  public PeekingIterator(Iterator<Integer> iterator) {
    // initialize any member here.
    this.iter = iterator;
    if (iterator.hasNext()) {
      next = iterator.next();
    }
  }

  /**
   * Just return the cached element.
   */
  // Returns the next element in the iteration without advancing the iterator.
  public Integer peek() {
    return next;
  }

  /**
   * Return next value.
   * If iterator still has more elements, update next with next.
   * If iterator don''t have any more, set next to null.
   */
  // hasNext() and next() should behave the same as in the Iterator interface.
  // Override them if needed.
  @Override
  public Integer next() {
    int res = next;
    next = iter.hasNext() ? iter.next() : null;
    return res;
  }

  /**
   * Just check next.
   */
  @Override
  public boolean hasNext() {
    return next != null;
  }

}