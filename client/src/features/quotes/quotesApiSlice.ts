// Need to use the React-specific entry point to import `createApi`
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"

interface Quote {
  country_id: number
  last_update: string
  country: string
}

interface QuotesApiResponse {
  quotes: Quote[]
  total: number
  skip: number
  limit: number
}

const isProd =import.meta.env.PROD
const baseUrl = !isProd ? "http://localhost:3000/api" : `${window.location.origin}/api`

// Define a service using a base URL and expected endpoints
export const quotesApiSlice = createApi({
  baseQuery: fetchBaseQuery({ baseUrl }),
  reducerPath: "quotesApi",
  // Tag types are used for caching and invalidation.
  tagTypes: ["Quotes"],
  endpoints: build => ({
    // Supply generics for the return type (in this case `QuotesApiResponse`)
    // and the expected query argument. If there is no argument, use `void`
    // for the argument type instead.
    getQuotes: build.query<QuotesApiResponse, number>({
      query: (limit = 10) => `/quotes/?limit=${limit}`,
      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      providesTags: (result, error, id) => [{ type: "Quotes", id }],
    }),
    getQuoteById: build.query({
      query: (id) => `/quotes/${id}`,
      providesTags: (result, error, id) => [{ type: "Quotes", id }],
    }),
    createQuote: build.mutation({
      query: (newQuote: Quote) => ({
        url: "/quotes",
        method: "POST",
        body: newQuote,
      }),
      invalidatesTags: ["Quotes"],
    }),
    updateQuote: build.mutation({
      query: ({ id, ...updatedQuote }) => ({
        url: `/quotes/${id}`,
        method: "PUT",
        body: updatedQuote,
      }),
      invalidatesTags: (result, error, { id }) => [{ type: "Quotes", id }],
    }),
    deleteQuote: build.mutation({
      query: (id) => ({
        url: `/quotes/${id}`,
        method: "DELETE",
      }),
      invalidatesTags: ["Quotes"],
    }),
  }),
})

// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
export const { 
  useGetQuotesQuery,
  useGetQuoteByIdQuery,
  useCreateQuoteMutation,
  useUpdateQuoteMutation,
  useDeleteQuoteMutation,
} = quotesApiSlice
