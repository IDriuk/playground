https://hub.docker.com/_/postgres

docker network create some-network
docker run --name some-postgres --network some-network -e POSTGRES_PASSWORD=mysecretpassword -d postgres   
docker run -it --rm --network some-network postgres psql -h some-postgres -U postgres

docker run -it --rm --network postgres_pgnet postgres psql -h pgcon -U postgres
docker run -it --rm --network postgres_default postgres psql -h db -U postgres

CREATE DATABASE lusiadas;
docker run -it --rm --network postgres_default postgres psql postgres://postgres:example@db:5432/lusiadas


https://www.prisma.io/dataguide/postgresql/short-guides/connection-uris

#!/bin/sh
npx prisma generate
npx prisma migrate reset --force --skip-seed
npx prisma db push

RUN rm -rf node_modules 
RUN npm install
RUN chmod +x ./prisma-commands.sh
CMD ./prisma-commands.sh && npm run dev

docker run -it --rm --network postgres_default -p 3000:3000 nextjs


services:
  db:
    image: postgres
    restart: always
    shm_size: 128mb
    environment:
      POSTGRES_PASSWORD: example

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
      
System: PostgreSQL
Server: db
Username: postgres
Password: example
Database: оставить пустым (или указать postgres).

docker exec -it 1017ed808063 bash
psql -h localhost -U postgres


https://www.postgresqltutorial.com/postgresql-getting-started/postgresql-sample-database/
DROP DATABASE IF EXISTS dvdrental;
CREATE DATABASE dvdrental;

docker run -it -v ${PWD}:/rental  --rm --network postgres_default postgres bash
pg_restore -d "postgres://postgres:example@db:5432/dvdrental" .
psql -U postgres -h db
pg_dump -d "postgres://postgres:example@db:5432/dvdrental" -F tar -f /rental/pgdump.tar
pg_restore -d "postgres://postgres:example@db:5432/dvdrental" /rental/pgdump.tar

pg_dump -U postgres -d sourcedb -f sourcedb.sql
CREATE DATABASE targetdb;
psql -U postgres -d targetdb -f sourcedb.sql

\l
\c dvdrental
\dt
\s - history
\? - help
\q - quit
\timing 
\pset null null


TRUNCATE TABLE cars;
DROP TABLE IF EXISTS author;
DROP TABLE authors CASCADE;

CREATE TABLE categories (
  category_id SERIAL NOT NULL PRIMARY KEY,
  category_name VARCHAR(255),
  description VARCHAR(255),
  year INT,
  price DECIMAL(10, 2),
  order_date DATE,
  department_name VARCHAR (255) NOT NULL, 
  release_year SMALLINT,
  title VARCHAR NOT NULL, 
);

CREATE TABLE employee (
  employee_id INT PRIMARY KEY, 
  first_name VARCHAR (255) NOT NULL, 
  last_name VARCHAR (255) NOT NULL, 
  manager_id INT, 
  FOREIGN KEY (manager_id) REFERENCES employee (employee_id) ON DELETE CASCADE
);

CREATE TABLE accounts (
    id INT GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(100) NOT NULL,
    balance DEC(15,2) NOT NULL CHECK(balance >= 0),
    PRIMARY KEY(id)
);


CREATE TABLE customers(
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    group_id INT NOT NULL,
    FOREIGN KEY (group_id) REFERENCES customer_groups(id) 
       ON DELETE CASCADE 
       ON UPDATE CASCADE
);

created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP 
updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
message TEXT NOT NULL,
name VARCHAR NOT NULL,
properties JSONB

CREATE TABLE action_film 
AS
SELECT
    film_id,
    title,
    release_year,
    length,
    rating
FROM
    film
INNER JOIN film_category USING (film_id)
WHERE
    category_id = 1;

CREATE TABLE IF NOT EXISTS film_rating (rating, film_count) 
AS 
SELECT
    rating,
    COUNT (film_id)
FROM
    film
GROUP BY
    rating;

CREATE VIEW customer_data
AS SELECT
    c.id,
    c.name,
    g.name customer_group
FROM
    customers c
INNER JOIN customer_groups g ON g.id = c.group_id;

CREATE TEMP TABLE customers(
    customer_id INT
);

CREATE OR REPLACE FUNCTION update_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = current_timestamp;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER department_updated_at_trigger
BEFORE UPDATE ON department
FOR EACH ROW
EXECUTE FUNCTION update_updated_at();

CREATE INDEX idx_address_phone 
ON address(phone);

function with transaction is stored pocedure

BEGIN;
INSERT INTO accounts(name,balance)
VALUES('Alice',10000);
COMMIT;

BEGIN;
UPDATE accounts
SET balance = balance - 1000
WHERE id =  1;
ROLLBACK;


ALTER TABLE customers ADD COLUMN fax VARCHAR (25), ADD COLUMN email VARCHAR (400);
ALTER TABLE links ADD COLUMN active boolean;
ALTER TABLE cars ALTER COLUMN year TYPE VARCHAR(4);
ALTER TABLE links DROP COLUMN active;
ALTER TABLE links RENAME COLUMN title TO link_title;
ALTER COLUMN target SET DEFAULT '_blank';
ALTER TABLE links  ADD CHECK (target IN ('_self', '_blank', '_parent', '_top'));
ALTER TABLE links ADD CONSTRAINT unique_url UNIQUE ( url );
ALTER TABLE links RENAME TO urls;
ALTER TABLE contact_backup ADD PRIMARY KEY(id);
ALTER TABLE contact_backup ADD UNIQUE(email);

INSERT INTO cars (brand, model, year)
VALUES
  ('Volvo', 'p1800', 1968),
  ('BMW', 'M1', 1978),
  ('Toyota', 'Celica', 1975);

INSERT INTO orders (order_id, customer_id, order_date)
VALUES
  (10248, 90, '2021-07-04'),
  (10249, 81, '2021-07-05'),
  (10250, 34, '2021-07-08');

INSERT INTO
  colors (bcolor, fcolor)
VALUES
  ('red', 'red'),
  ('red', 'red'),
  ('red', NULL),
  (NULL, 'red'),
  (NULL, NULL);

INSERT INTO links (url, name)
VALUES('http://www.oreilly.com','O''Reilly Media')
RETURNING id;

SELECT
    film_id,
    title,
    rental_rate
INTO TABLE film_r
FROM
    film
WHERE
    rating = 'R'
AND rental_duration = 5
ORDER BY
    title;

SELECT
    film_id,
    title,
    length 
INTO TEMP TABLE short_film
FROM
    film
WHERE
    length < 60
ORDER BY
    title;

INSERT INTO inventory (id, name, price, quantity)
VALUES (1, 'A', 16.99, 120)
ON CONFLICT(id) 
DO UPDATE SET
  price = EXCLUDED.price,
  quantity = EXCLUDED.quantity;

INSERT INTO contacts(name, phones) 
VALUES
   ('John Doe','["408-111-2222", "408-111-2223"]'),
   ('Jane Doe','["212-111-2222", "212-111-2223"]')
RETURNING *;
SELECT 
  name, 
  phones ->> 0 "work phone" 
FROM 
  contacts;


WITH json_cte AS(
  SELECT 
    jsonb_build_object(
      'first_name',  first_name, 
      'last_name',  last_name, 
      'email',  email, 
      'phone',  a.phone, 
      'address', 
      jsonb_build_object(
        'address', a.address, 
        'city', i.city, 
        'postal_code', a.postal_code, 
        'district',  a.district, 
        'country', o.country
      )
    ):: jsonb AS data 
  FROM 
    customer c 
    INNER JOIN address a ON a.address_id = c.address_id 
    INNER JOIN city i ON i.city_id = a.city_id 
    INNER JOIN country o ON o.country_id = i.country_id
) 

INSERT INTO customer_json(data) 
SELECT 
  data 
FROM 
  json_cte;

SELECT
   data ->> 'first_name' first_name,
   data ->> 'last_name' last_name,
   data ->> 'phone' phone
FROM
   customer_json
WHERE
   data @> '{"first_name": "John"}'; 


UPDATE product
SET published_date = '2020-07-01', net_price = price - price * discount
FROM product_segment
WHERE product.segment_id = product_segment.id;


DELETE FROM cars WHERE brand = 'Volvo';
DELETE FROM member 
WHERE phone IN (
    SELECT 
      phone 
    FROM 
      denylist
);


SELECT CURRENT_USER;
SET timezone = 'America/New_York';
SELECT CURRENT_TIMESTAMP;
SET TIME ZONE 'Europe/Kyiv';
SHOW TIMEZONE;
RESET TIME ZONE;

SELECT 
  indexname, 
  indexdef 
FROM 
  pg_indexes 
WHERE 
  tablename = 'address';

SELECT table_schema, table_name
FROM information_schema.tables
WHERE table_type = 'BASE TABLE' AND table_schema NOT IN ('information_schema', 'pg_catalog');

EXPLAIN ANALYZE
    SELECT
        f.film_id,
        title,
        name category_name
    FROM
        film f
        INNER JOIN film_category fc 
            ON fc.film_id = f.film_id
        INNER JOIN category c 
            ON c.category_id = fc.category_id
    ORDER BY
        title;

SELECT * FROM cars;
select * from cars where year < 1975;

=	Equal to
<	Less than
>	Greater than
<=	Less than or equal to
>=	Greater than or equal to
<>	Not equal to
!=	Not equal to
LIKE	Check if a value matches a pattern (case sensitive)
ILIKE	Check if a value matches a pattern (case insensitive)
AND	Logical AND
OR	Logical OR
IN	Check if a value is between a range of values
BETWEEN	Check if a value is between a range of values
IS NULL	Check if a value is NULL
NOT	Makes a negative result e.g. NOT LIKE, NOT IN, NOT BETWEEN

% - zero, one or multiple characters
_ - one character

~~	LIKE
~~*	ILIKE
!~~	NOT LIKE
!~~*	NOT ILIKE


SELECT * FROM cars WHERE model LIKE 'M%';
SELECT * FROM cars WHERE model ILIKE 'm%';

WHERE brand = 'Volvo' AND year = 1968;
WHERE brand = 'Volvo' OR year = 1975;
WHERE brand IN ('Volvo', 'Mercedes', 'Ford');
WHERE year BETWEEN 1970 AND 1980;
WHERE model IS NULL;
WHERE model IS NOT NULL;
WHERE brand NOT LIKE 'B%';
WHERE brand NOT ILIKE 'b%';
WHERE brand NOT IN ('Volvo', 'Mercedes', 'Ford');
WHERE year NOT BETWEEN 1970 AND 1980;

SELECT DISTINCT country FROM customers;
SELECT COUNT(DISTINCT country) FROM customers;
SELECT 
  DISTINCT ON (name) name, 
  subject, 
  score 
FROM 
  student_scores 
ORDER BY 
  name, 
  score DESC;

SELECT * FROM products ORDER BY price DESC;
SELECT * FROM customers LIMIT 20 OFFSET 40;
SELECT MAX(price) FROM products;
SELECT MIN(price) AS lowest_price FROM products;
SELECT COUNT(customer_id) FROM customers;
SELECT SUM(quantity) FROM order_details;
SELECT AVG(price)::NUMERIC(10,2) FROM products;
WHERE customer_name ILIKE '%A%';
WHERE city LIKE 'L_nd__';
WHERE country IN ('Germany', 'France', 'UK');
WHERE country NOT IN ('Germany', 'France', 'UK');
WHERE payment_date::date IN ('2007-02-15', '2007-02-16');

SELECT * FROM customers WHERE customer_id 
IN (SELECT customer_id FROM orders);

WHERE product_name BETWEEN 'Pavlova' AND 'Tofu' ORDER BY product_name;
WHERE order_date BETWEEN '2023-04-12' AND '2023-05-05';

SELECT customer_id AS id FROM customers;
SELECT customer_id id FROM customers;

SELECT product_name || unit AS product FROM products;
SELECT product_name || ' ' || unit AS product FROM products;
SELECT product_name AS "My Great Products" FROM products;


INNER JOIN: Returns records that have matching values in both tables
LEFT JOIN: Returns all records from the left table, and the matched records from the right table
RIGHT JOIN: Returns all records from the right table, and the matched records from the left table
FULL JOIN: Returns all records when there is a match in either left or right table

SELECT product_id, product_name, category_name FROM products
INNER JOIN categories ON products.category_id = categories.category_id;

LEFT JOIN categories ON testproducts.category_id = categories.category_id;
RIGHT JOIN categories ON testproducts.category_id = categories.category_id;
FULL JOIN categories ON testproducts.category_id = categories.category_id;
CROSS JOIN categories;
INNER JOIN film f2 ON f1.film_id <> f2.film_id AND f1.length = f2.length;
FULL OUTER JOIN departments d ON d.department_id = e.department_id;

SELECT product_id FROM products
UNION
SELECT testproduct_id FROM testproducts 
ORDER BY product_id;

SELECT product_id FROM products
UNION ALL
SELECT testproduct_id FROM testproducts ORDER BY product_id;

SELECT COUNT(customer_id), country
FROM customers
GROUP BY country;

SELECT customers.customer_name, SUM(products.price)
FROM order_details
LEFT JOIN products ON order_details.product_id = products.product_id
LEFT JOIN orders ON order_details.order_id = orders.order_id
LEFT JOIN customers ON orders.customer_id = customers.customer_id
GROUP BY customer_name
HAVING SUM(products.price) > 1000.00;

SELECT customers.customer_name
FROM customers
WHERE EXISTS (
  SELECT order_id
  FROM orders
  WHERE customer_id = customers.customer_id
);
EXISTS( SELECT 1 FROM payment WHERE amount = 0 );
EXISTS (SELECT 1 FROM payment p WHERE p.customer_id = c.customer_id AND amount > 11) 

SELECT * 
FROM 
  employees 
WHERE salary > ANY ( SELECT salary FROM managers );
WHERE salary > ALL( select salary from managers);


ORDER BY len DESC;
ORDER BY first_name ASC, last_name DESC;
ORDER BY num NULLS FIRST;
ORDER BY num DESC NULLS LAST;

SELECT 
  first_name, 
  LENGTH(first_name) name_length 
FROM 
  customer 
WHERE 
  first_name LIKE 'A%' 
  AND LENGTH(first_name) BETWEEN 3 
  AND 5 
ORDER BY 
  name_length;

SELECT product_name,
CASE
  WHEN price < 10 THEN 'Low price product'
  WHEN price > 50 THEN 'High price product'
ELSE
  'Normal product'
END AS "price category"
FROM products;


SELECT first_name, last_name FROM customer WHERE first_name ~~ 'Dar%' ORDER BY first_name;
SELECT * FROM t WHERE message LIKE '%10$%%' ESCAPE '$';


SELECT c.customer_id, c.first_name, c.last_name, p.amount, p.payment_date 
FROM customer c 
  INNER JOIN payment p ON p.customer_id = c.customer_id 
ORDER BY p.payment_date;

SELECT customer_id, first_name, last_name, amount, payment_date 
FROM customer INNER JOIN payment USING(customer_id) 
ORDER BY payment_date;

SELECT 
  c.customer_id, 
  c.first_name || ' ' || c.last_name customer_name, 
  s.first_name || ' ' || s.last_name staff_name, 
  p.amount, 
  p.payment_date 
FROM 
  customer c 
  INNER JOIN payment p USING (customer_id) 
  INNER JOIN staff s using(staff_id) 
ORDER BY 
  payment_date;

SELECT 
  f1.title, 
  f2.title, 
  f1.length 
FROM 
  film f1 
  INNER JOIN film f2 ON f1.film_id > f2.film_id 
  AND f1.length = f2.length;

SELECT customer_id, staff_id, SUM(amount) 
FROM payment 
GROUP BY staff_id, customer_id 
ORDER BY customer_id;

SELECT store_id, COUNT (customer_id) 
FROM customer GROUP BY store_id 
HAVING COUNT (customer_id) > 300;

SELECT * FROM top_rated_films
UNION
SELECT * FROM most_popular_films;

SELECT *
FROM most_popular_films 
INTERSECT
SELECT *
FROM top_rated_films;

SELECT * FROM top_rated_films
EXCEPT 
SELECT * FROM most_popular_films;

SELECT film_id, title, length, rating 
FROM film f
WHERE length > ( 
  SELECT AVG(length) FROM film WHERE rating = f.rating 
);

WITH cte_rental AS (
  SELECT 
    staff_id, 
    COUNT(rental_id) rental_count 
  FROM 
    rental 
  GROUP BY 
    staff_id
) 
SELECT 
  s.staff_id, 
  first_name, 
  last_name, 
  rental_count 
FROM 
  staff s 
  INNER JOIN cte_rental USING (staff_id);


WITH film_stats AS (
    SELECT
        AVG(rental_rate) AS avg_rental_rate,
        MAX(length) AS max_length,
        MIN(length) AS min_length
    FROM film
),
customer_stats AS (
    SELECT
        COUNT(DISTINCT customer_id) AS total_customers,
        SUM(amount) AS total_payments
    FROM payment
)
SELECT
    ROUND((SELECT avg_rental_rate FROM film_stats), 2) AS avg_film_rental_rate,
    (SELECT max_length FROM film_stats) AS max_film_length,
    (SELECT min_length FROM film_stats) AS min_film_length,
    (SELECT total_customers FROM customer_stats) AS total_customers,
    (SELECT total_payments FROM customer_stats) AS total_payments;


WITH RECURSIVE subordinates AS (
  SELECT 
    employee_id, 
    manager_id, 
    full_name 
  FROM 
    employees 
  WHERE 
    employee_id = 2 
  UNION 
  SELECT 
    e.employee_id, 
    e.manager_id, 
    e.full_name 
  FROM 
    employees e 
    INNER JOIN subordinates s ON s.employee_id = e.manager_id
) 
SELECT * FROM subordinates;


SELECT product, 
( price - COALESCE(discount, 0)) AS net_price 
FROM items;

SELECT product, 
  (
    price - CASE WHEN discount IS NULL THEN 0 ELSE discount END
  ) AS net_price 
FROM items;

SELECT id, title, 
  COALESCE (
    NULLIF (excerpt, ''), 
    LEFT (body, 40)
  ) 
FROM posts;


SELECT '2019-06-15 14:30:20'::timestamp;
SELECT CAST ('10.2' AS DOUBLE);

SELECT CAST('2024-02-01 12:34:56' AS DATE);
SELECT CAST(ARRAY[1, 2, 3] AS TEXT);
SELECT '{1,2,3}'::INTEGER[] AS result_array;

SELECT 
  id, 
  CASE WHEN rating~E'^\\d+$' THEN CAST (rating AS INTEGER) ELSE 0 END as rating 
FROM 
  ratings;
